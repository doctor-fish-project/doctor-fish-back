<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.doctor_fish_back.repository.user.UserUserMapper">

    <resultMap id="userResultMap" type="com.project.doctor_fish_back.entity.User">
        <id property="id" column="user_id" />
        <result property="email" column="email" />
        <result property="name" column="name" />
        <result property="password" column="password" />
        <result property="phoneNumber" column="phone_number" />
        <result property="img" column="img" />
        <result property="emailValid" column="email_valid" />
        <result property="registerDate" column="register_date" />
        <result property="updateDate" column="update_date" />
        <collection property="userRoles" javaType="java.util.Set" resultMap="userRolesResultMap" />
    </resultMap>

    <resultMap id="userRolesResultMap" type="com.project.doctor_fish_back.entity.UserRoles">
        <id property="id" column="user_roles_id" />
        <result property="userId" column="ur_user_id" />
        <result property="roleId" column="ur_role_id" />
        <association property="role" resultMap="roleResultMap" />
    </resultMap>

    <resultMap id="roleResultMap" type="com.project.doctor_fish_back.entity.Role">
        <id property="id" column="role_id" />
        <result property="name" column="role_name" />
    </resultMap>

    <insert id="save" useGeneratedKeys="true" keyProperty="id">
        insert into user_tb
        values(default, #{email}, #{name}, #{password}, #{phoneNumber}, #{img}, default, now(), now())
    </insert>

    <update id="modifyEmailValidByEmail">
        update user_tb
        set
            email_valid = if(email_valid = 0, 1, 0)
        where
            email = #{email}
    </update>

    <update id="modify">
        update user_tb
        set
            name = #{name},
            phone_number = #{phoneNumber},
            img = #{img},
            update_date = now()
        where
            id = #{id}
    </update>

    <update id="modifyEmail">
        update user_tb
        set
            email = #{email},
            update_date = now()
        where
            id = #{id}
    </update>

    <update id="modifyPassword">
        update user_tb
        set
            password = #{password},
            update_date = now()
        where
            email = #{email}
    </update>

    <update id="modifyEmailValidById">
        update user_tb
        set
            email_valid = if(email_valid = 0, 1, 0)
        where
            id = #{id}
    </update>

    <delete id="deleteById">
        delete
        from
            user_tb
        where
            id = #{id}
    </delete>

    <select id="findById" resultMap="userResultMap">
        select
            u.id as user_id,
            u.email,
            u.name,
            u.password,
            u.phone_number,
            u.img,
            u.email_valid,
            u.register_date,
            u.update_date,
            ur.id as user_roles_id,
            ur.user_id as ur_user_id,
            ur.role_id as ur_role_id,
            r.id as role_id,
            r.name as role_name
        from
            user_tb u
            left outer join user_roles_tb ur on(u.id = ur.user_id)
            left outer join role_tb r on(r.id = ur.role_id)
        where
            u.id = #{id}
    </select>

    <select id="findByEmail" resultMap="userResultMap">
        select
            u.id as user_id,
            u.email,
            u.name,
            u.password,
            u.phone_number,
            u.img,
            u.email_valid,
            u.register_date,
            u.update_date,
            ur.id as user_roles_id,
            ur.user_id as ur_user_id,
            ur.role_id as ur_role_id,
            r.id as role_id,
            r.name as role_name
        from
            user_tb u
            left outer join user_roles_tb ur on(u.id = ur.user_id)
            left outer join role_tb r on(r.id = ur.role_id)
        where
            u.email = #{email}
    </select>

    <select id="findByPhoneNumber" resultMap="userResultMap">
        select
            u.id as user_id,
            u.email,
            u.name,
            u.password,
            u.phone_number,
            u.img,
            u.email_valid,
            u.register_date,
            u.update_date,
            ur.id as user_roles_id,
            ur.user_id as ur_user_id,
            ur.role_id as ur_role_id,
            r.id as role_id,
            r.name as role_name
        from
            user_tb u
            left outer join user_roles_tb ur on(u.id = ur.user_id)
            left outer join role_tb r on(r.id = ur.role_id)
        where
            u.phone_number = #{phoneNumber}
    </select>

    <select id="findByName" resultType="com.project.doctor_fish_back.entity.User">
        select
            u.id as user_id,
            u.email,
            u.name,
            u.password,
            u.phone_number,
            u.img,
            u.email_valid,
            u.register_date,
            u.update_date,
            ur.id as user_roles_id,
            ur.user_id as ur_user_id,
            ur.role_id as ur_role_id,
            r.id as role_id,
            r.name as role_name
        from
            user_tb u
            left outer join user_roles_tb ur on(u.id = ur.user_id)
            left outer join role_tb r on(r.id = ur.role_id)
        where
            u.name = #{name}
    </select>

</mapper>